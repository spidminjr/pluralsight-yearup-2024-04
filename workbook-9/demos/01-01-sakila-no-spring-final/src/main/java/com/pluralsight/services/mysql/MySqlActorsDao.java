package com.pluralsight.services.mysql;

import com.pluralsight.models.Actor;
import com.pluralsight.services.ActorsDao;
import org.apache.commons.dbcp2.BasicDataSource;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MySqlActorsDao implements ActorsDao
{
    // DAO dependencies
    private DataSource dataSource;

    // constructor dependency injection
    public MySqlActorsDao(DataSource dataSource)
    {
       this.dataSource = dataSource;
    }

    // DAO Methods
    @Override
    public List<Actor> getAll()
    {
        List<Actor> actors = new ArrayList<>();

        try(Connection connection = dataSource.getConnection())
        {
            String sql = """
                        SELECT actor_id
                            , first_name
                            , last_name
                        FROM actor;
                    """;

            Statement statement = connection.createStatement();
            ResultSet row = statement.executeQuery(sql);

            while(row.next())
            {
                int actorId = row.getInt("actor_id");
                String firstName = row.getString("first_name");
                String lastName = row.getString("last_name");


                actors.add(new Actor(actorId, firstName, lastName));
            }
        }
        catch(Exception e)
        {

        }
        return actors;
    }

    @Override
    public List<Actor> searchByName(String firstName, String lastName)
    {
        List<Actor> actors = new ArrayList<>();

        String firstSearch = "%" + firstName + "%";
        String lastSearch = "%" + lastName + "%";

        try(Connection connection = dataSource.getConnection())
        {
            String sql = """
                        SELECT actor_id
                            , first_name
                            , last_name
                        FROM actor
                        WHERE first_name LIKE ?
                            AND last_name LIKE ?;
                    """;

            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, firstSearch);
            statement.setString(2, lastSearch);

            ResultSet row = statement.executeQuery();

            while(row.next())
            {
                int actorId = row.getInt("actor_id");
                String first = row.getString("first_name");
                String last = row.getString("last_name");


                actors.add(new Actor(actorId, first, last));
            }
        }
        catch(Exception e)
        {

        }
        return actors;
    }

    @Override
    public Actor getById(int id)
    {
        try(Connection connection = dataSource.getConnection())
        {
            String sql = """
                    SELECT actor_id
                        , first_name
                        , last_name
                    FROM actor
                    WHERE actor_id = ?
                    """;
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, id);

            ResultSet row = statement.executeQuery();

            if(row.next())
            {
                int actorId = row.getInt("actor_id");
                String firstName = row.getString("first_name");
                String lastName = row.getString("last_name");

                return new Actor(actorId, firstName, lastName);
            }
        }
        catch (SQLException e)
        {
        }
        return null;

    }

    @Override
    public Actor addActor(Actor actor)
    {
        try(Connection connection = dataSource.getConnection())
        {
            String sql = "INSERT INTO actor (first_name, last_name) VALUES (?,?);";

            PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, actor.getFirstName());
            statement.setString(2, actor.getLastName());

            statement.executeUpdate();

            // getGeneratedKeys() returns a ResultSet of autogenerated ids
            ResultSet key = statement.getGeneratedKeys();
            key.next();
            int id = key.getInt(1);

            return getById(id);
        }
        catch (Exception e){}

        return null;
    }

    @Override
    public void updateActor(Actor actor)
    {
        try(Connection connection = dataSource.getConnection())
        {
            // update logic here
            String sql = """
                    UPDATE actor
                    SET first_name = ?
                        , last_name = ?
                    WHERE actor_id = ?;
                    """;
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, actor.getFirstName());
            statement.setString(2, actor.getLastName());
            statement.setInt(3, actor.getActorId());

            statement.executeUpdate();
        }
        catch (SQLException e)
        {
        }
    }

    @Override
    public void deleteActor(int actorId)
    {

        try(Connection connection = dataSource.getConnection())
        {
            String sql = "DELETE FROM actor WHERE actor_id = ?;";

            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1,actorId);

            statement.executeUpdate();
        }
        catch (SQLException e)
        {
        }
    }
}
